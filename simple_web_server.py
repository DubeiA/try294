#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Enhanced Video Review System - –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è (Quick Fix)
"""

import http.server
import socketserver
import json
import os
import time
import glob
import urllib.parse
from datetime import datetime
from typing import Dict, List, Optional

class EnhancedVideoReviewHandler(http.server.SimpleHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        # –®–ª—è—Ö–∏ (–∫–æ–Ω—Ñ—ñ–≥—É—Ä—É—é—Ç—å—Å—è —á–µ—Ä–µ–∑ ENV –∑ –¥–µ—Ñ–æ–ª—Ç–∞–º–∏ –ø—ñ–¥ RunPod)
        # COMFY_OUTPUT_DIR=/workspace/ComfyUI/output/
        # WAN22_SYSTEM_DIR=/workspace/wan22_system/
        self.video_dir = os.environ.get("COMFY_OUTPUT_DIR", "/workspace/ComfyUI/output/")
        self.workspace_dir = os.environ.get("WAN22_SYSTEM_DIR", "/workspace/wan22_system/")
        self.auto_state_dir = os.path.join(self.workspace_dir, "auto_state")
        
        # JSON —Ñ–∞–π–ª–∏ —Å–∏—Å—Ç–µ–º–∏ –Ω–∞–≤—á–∞–Ω–Ω—è
        self.manual_ratings_file = os.path.join(self.auto_state_dir, "manual_ratings.json")
        self.bandit_state_file = os.path.join(self.auto_state_dir, "bandit_state.json")
        self.knowledge_file = os.path.join(self.auto_state_dir, "knowledge.json")
        self.review_queue_file = os.path.join(self.auto_state_dir, "review_queue.json")
        
        # –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
        os.makedirs(self.auto_state_dir, exist_ok=True)
        self._ensure_json_files()
        
        super().__init__(*args, **kwargs)
    
    def _ensure_json_files(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö JSON —Ñ–∞–π–ª—ñ–≤, —è–∫—â–æ –≤–æ–Ω–∏ –Ω–µ —ñ—Å–Ω—É—é—Ç—å"""
        if not os.path.exists(self.manual_ratings_file):
            self._save_json(self.manual_ratings_file, {})
        
        if not os.path.exists(self.bandit_state_file):
            self._save_json(self.bandit_state_file, {"arms": [], "N": [], "S": [], "t": 0})
        
        if not os.path.exists(self.knowledge_file):
            self._save_json(self.knowledge_file, {"best_score": 0, "best_params": {}, "history": []})
        
        if not os.path.exists(self.review_queue_file):
            self._save_json(self.review_queue_file, {"pending": [], "in_review": [], "completed": []})
    
    def _load_json(self, filepath: str, default=None):
        """–ë–µ–∑–ø–µ—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è JSON"""
        try:
            if os.path.exists(filepath):
                with open(filepath, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è {filepath}: {e}")
        return default if default is not None else {}
    
    def _save_json(self, filepath: str, data):
        """–ë–µ–∑–ø–µ—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è JSON"""
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
            return True
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è {filepath}: {e}")
            return False
    
    def do_GET(self):
        # –ü–∞—Ä—Å–∏–º–æ URL —Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        url_parts = urllib.parse.urlparse(self.path)
        path = url_parts.path
        
        print(f"üåê GET –∑–∞–ø–∏—Ç: {self.path}")
        print(f"üìç –®–ª—è—Ö: {path}")
        
        if path == '/':
            self.serve_main_page()
        elif path == '/api/videos':
            self.serve_videos_api()
        elif path == '/api/stats':
            self.serve_stats_api()
        elif path == '/api/debug':
            self.serve_debug_api()
        elif path.startswith('/video/'):
            self.serve_video()
        else:
            super().do_GET()
    
    def do_POST(self):
        if self.path == '/api/rate':
            self.handle_rating()
        else:
            self.send_error(404)
    
    def serve_main_page(self):
        """–ü–æ–≤–Ω–∏–π HTML —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑ —É—Å—ñ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏"""
        html = """
<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üé¨ Enhanced Video Review System - RunPod</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            color: #fff; min-height: 100vh;
        }
        
        .container { max-width: 1400px; margin: 0 auto; padding: 20px; }
        
        .header { 
            background: rgba(255,255,255,0.1); backdrop-filter: blur(10px);
            border-radius: 15px; padding: 30px; margin-bottom: 30px; 
            text-align: center; border: 1px solid rgba(255,255,255,0.2);
        }
        
        .header h1 { 
            font-size: 2.5rem; margin-bottom: 10px; 
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        
        .stats-grid { 
            display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); 
            gap: 20px; margin-bottom: 30px;
        }
        
        .stat-card { 
            background: rgba(255,255,255,0.15); backdrop-filter: blur(10px);
            border-radius: 12px; padding: 20px; text-align: center;
            border: 1px solid rgba(255,255,255,0.2);
        }
        
        .stat-value { font-size: 2rem; font-weight: bold; margin-bottom: 5px; color: #ffd700; }
        .stat-label { font-size: 0.9rem; opacity: 0.8; }
        
        .video-section { 
            background: rgba(255,255,255,0.1); backdrop-filter: blur(10px);
            border-radius: 15px; padding: 30px; margin-bottom: 20px;
        }
        
        .video-header { 
            display: flex; justify-content: space-between; align-items: center; 
            margin-bottom: 20px;
        }
        
        .video-nav { display: flex; gap: 10px; }
        
        .nav-btn { 
            background: #4CAF50; color: white; border: none; 
            padding: 10px 20px; border-radius: 8px; cursor: pointer; 
            font-size: 1rem; transition: all 0.3s;
        }
        
        .load-more-btn {
            background: #2196F3; color: white; border: none; 
            padding: 10px 20px; border-radius: 8px; cursor: pointer; 
            font-size: 1rem; transition: all 0.3s;
        }
        
        .nav-btn:hover, .load-more-btn:hover { 
            background: #45a049; transform: translateY(-2px); 
        }
        .nav-btn:disabled { background: #666; cursor: not-allowed; transform: none; }
        
        .video-container { 
            display: grid; grid-template-columns: 1fr 1fr; 
            gap: 30px; margin-bottom: 30px;
        }
        
        .video-player { 
            background: #000; border-radius: 12px; overflow: hidden;
        }
        
        .video-player video { width: 100%; height: auto; max-height: 400px; }
        
        .video-info { 
            background: rgba(255,255,255,0.05); border-radius: 12px; 
            padding: 20px;
        }
        
        .info-section { margin-bottom: 20px; }
        
        .info-title { 
            font-size: 1.1rem; font-weight: bold; margin-bottom: 10px; 
            color: #ffd700;
        }
        
        .info-content { 
            background: rgba(0,0,0,0.3); padding: 12px; border-radius: 8px; 
            font-family: 'Courier New', monospace; white-space: pre-wrap;
            max-height: 150px; overflow-y: auto; font-size: 0.9rem;
        }
        
        .params-grid { 
            display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); 
            gap: 10px;
        }
        
        .param-item { 
            background: rgba(0,0,0,0.3); padding: 8px 12px; 
            border-radius: 6px; text-align: center;
        }
        
        .param-label { font-size: 0.8rem; opacity: 0.7; margin-bottom: 2px; }
        .param-value { font-weight: bold; color: #ffd700; }
        
        .auto-metrics { 
            display: grid; grid-template-columns: repeat(auto-fit, minmax(100px, 1fr)); 
            gap: 8px; margin-top: 10px;
        }
        
        .metric-item { 
            background: rgba(0,100,255,0.2); padding: 6px; border-radius: 6px; 
            text-align: center; border: 1px solid rgba(0,100,255,0.3);
        }
        
        .metric-label { font-size: 0.75rem; opacity: 0.8; margin-bottom: 2px; }
        .metric-value { font-weight: bold; color: #87ceeb; font-size: 0.9rem; }
        
        .rating-form { 
            background: rgba(255,255,255,0.05); border-radius: 12px; 
            padding: 25px; margin-top: 20px;
        }
        
        .rating-grid { 
            display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); 
            gap: 20px;
        }
        
        .rating-group { 
            background: rgba(255,255,255,0.05); padding: 15px; 
            border-radius: 8px;
        }
        
        .rating-label { 
            display: block; font-weight: bold; margin-bottom: 10px; 
            color: #ffd700;
        }
        
        .rating-input { width: 100%; margin-bottom: 10px; }
        
        .rating-scale { 
            display: flex; justify-content: space-between; 
            font-size: 0.8rem; opacity: 0.7;
        }
        
        .rating-value { 
            font-size: 1.2rem; font-weight: bold; color: #ffd700; 
            text-align: center;
        }
        
        .defects-section { 
            grid-column: 1 / -1; background: rgba(255,0,0,0.1); 
            border: 1px solid rgba(255,0,0,0.3); border-radius: 8px; 
            padding: 15px;
        }
        
        .defects-grid { 
            display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); 
            gap: 15px; margin-top: 10px;
        }
        
        .checkbox-group { display: flex; align-items: center; gap: 8px; }
        
        .comment-section { grid-column: 1 / -1; margin-top: 15px; }
        
        .comment-input { 
            width: 100%; min-height: 80px; padding: 12px; 
            border: 1px solid rgba(255,255,255,0.3); border-radius: 8px; 
            background: rgba(255,255,255,0.1); color: #fff; 
            font-family: inherit; resize: vertical;
        }
        
        .comment-input::placeholder { color: rgba(255,255,255,0.6); }
        
        .action-buttons { 
            display: flex; gap: 15px; justify-content: center; 
            margin-top: 25px;
        }
        
        .submit-btn { 
            background: linear-gradient(45deg, #4CAF50, #45a049); 
            color: white; border: none; padding: 15px 30px; 
            border-radius: 8px; cursor: pointer; font-size: 1.1rem; 
            font-weight: bold; transition: all 0.3s;
        }
        
        .submit-btn:hover { 
            transform: translateY(-2px); 
            box-shadow: 0 5px 15px rgba(76,175,80,0.4);
        }
        
        .skip-btn { 
            background: linear-gradient(45deg, #ff9800, #f57c00); 
            color: white; border: none; padding: 15px 30px; 
            border-radius: 8px; cursor: pointer; font-size: 1.1rem; 
            font-weight: bold; transition: all 0.3s;
        }
        
        .skip-btn:hover { 
            transform: translateY(-2px); 
            box-shadow: 0 5px 15px rgba(255,152,0,0.4);
        }
        
        .reference-checkbox { 
            display: flex; align-items: center; gap: 10px; 
            background: rgba(255,215,0,0.1); border: 1px solid rgba(255,215,0,0.3); 
            border-radius: 8px; padding: 15px; margin-top: 15px;
        }
        
        .no-videos { 
            text-align: center; padding: 60px 20px; 
            background: rgba(255,255,255,0.1); border-radius: 15px;
        }
        
        .no-videos h2 { 
            font-size: 2rem; margin-bottom: 15px; color: #ffd700;
        }
        
        .loading { 
            text-align: center; padding: 50px; 
            background: rgba(255,255,255,0.1); border-radius: 15px;
        }
        
        .debug-info {
            background: rgba(255,255,0,0.1); border: 1px solid rgba(255,255,0,0.3);
            border-radius: 8px; padding: 10px; margin: 10px 0; font-size: 0.8rem;
        }
        
        .error-message { 
            background: rgba(244,67,54,0.9); color: white; 
            padding: 10px 20px; border-radius: 8px; margin: 10px 0; 
            text-align: center;
        }
        
        .success-message { 
            background: rgba(76,175,80,0.9); color: white; 
            padding: 10px 20px; border-radius: 8px; margin: 10px 0; 
            text-align: center;
        }
        
        @media (max-width: 768px) {
            .video-container { grid-template-columns: 1fr; }
            .rating-grid { grid-template-columns: 1fr; }
            .stats-grid { grid-template-columns: repeat(2, 1fr); }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üé¨ Enhanced Video Review System</h1>
            <p>–†–æ–∑—É–º–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –æ—Ü—ñ–Ω–∫–∏ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏—Ö –≤—ñ–¥–µ–æ –∑ –Ω–∞–≤—á–∞–Ω–Ω—è–º –∞–≥–µ–Ω—Ç–∞</p>
            <div id="stats-display">–ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...</div>
        </div>

        <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
        <div id="stats-grid" class="stats-grid"></div>

        <!-- –°–µ–∫—Ü—ñ—è –≤—ñ–¥–µ–æ -->
        <div id="video-section" class="loading">
            <h3>‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ...</h3>
        </div>
    </div>

    <script src="/static/review_app.js"></script>
    <!-- Inline fallback is retained below (commented). Keep external JS as primary. -->
    <!--
        let currentVideoIndex = 0;
        let videos = [];
        let stats = {};
        let videosPerPage = 50; // –ó–º–µ–Ω—à–µ–Ω–æ –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
        let loadedVideos = 0;

        // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
        async function initializeApp() {
            console.log('üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–≥—Ä–∞–º–∏...');
            await Promise.all([loadStats(), loadVideos()]);
        }

        async function loadStats() {
            try {
                console.log('üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
                const response = await fetch('/api/stats');
                stats = await response.json();
                console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞:', stats);
                renderStats();
            } catch (error) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            }
        }

        async function loadVideos(offset = 0) {
            try {
                console.log(`üé¨ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ: offset=${offset}, limit=${videosPerPage}`);
                const url = `/api/videos?offset=${offset}&limit=${videosPerPage}`;
                console.log('üåê URL –∑–∞–ø–∏—Ç—É:', url);
                
                const response = await fetch(url);
                console.log('üì° –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const newVideos = await response.json();
                console.log(`üì¶ –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–µ–æ: ${newVideos.length}`);
                
                if (offset === 0) {
                    videos = newVideos;
                } else {
                    videos = videos.concat(newVideos);
                }
                
                loadedVideos = offset + newVideos.length;
                console.log(`üìà –í—Å—å–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: ${loadedVideos}`);
                
                if (videos.length > 0) {
                    renderVideoInterface();
                    if (offset === 0) {
                        displayVideo(0);
                    }
                } else if (offset === 0) {
                    renderNoVideos();
                }
            } catch (error) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ:', error);
                document.getElementById('video-section').innerHTML = 
                    `<div class="error-message">‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ: ${error.message}</div>`;
            }
        }

        function renderStats() {
            const statsGrid = document.getElementById('stats-grid');
            statsGrid.innerHTML = `
                <div class="stat-card">
                    <div class="stat-value">${stats.total_generated || 0}</div>
                    <div class="stat-label">–í—Å—å–æ–≥–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">${stats.total_rated || 0}</div>
                    <div class="stat-label">–û—Ü—ñ–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">${stats.pending_count || 0}</div>
                    <div class="stat-label">–û—á—ñ–∫—É—é—Ç—å –æ—Ü—ñ–Ω–∫–∏</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">${stats.bandit_iterations || 0}</div>
                    <div class="stat-label">–Ü—Ç–µ—Ä–∞—Ü—ñ–π –Ω–∞–≤—á–∞–Ω–Ω—è</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">${(stats.avg_rating || 0).toFixed(1)}</div>
                    <div class="stat-label">–°–µ—Ä–µ–¥–Ω—è –æ—Ü—ñ–Ω–∫–∞</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">${stats.learning_arms || 0}</div>
                    <div class="stat-label">–í–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω–∞–≤—á–∞–Ω–Ω—è</div>
                </div>
            `;
        }

        function renderVideoInterface() {
            const loadMoreButton = loadedVideos < stats.pending_count ? 
                `<button class="load-more-btn" onclick="loadMoreVideos()">–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —â–µ ${Math.min(videosPerPage, stats.pending_count - loadedVideos)} –≤—ñ–¥–µ–æ</button>` : '';
            
            document.getElementById('video-section').innerHTML = `
                <div class="video-section">
                    <div class="video-header">
                        <h2>üìπ –û—Ü—ñ–Ω–∫–∞ –≤—ñ–¥–µ–æ (<span id="current-index">1</span> –∑ ${videos.length}) [–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: ${loadedVideos}/${stats.pending_count}]</h2>
                        <div class="video-nav">
                            <button class="nav-btn" onclick="previousVideo()" id="prev-btn" disabled>‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—î</button>
                            <button class="nav-btn" onclick="nextVideo()" id="next-btn">–ù–∞—Å—Ç—É–ø–Ω–µ ‚û°Ô∏è</button>
                            ${loadMoreButton}
                        </div>
                    </div>
                    <div id="video-content"></div>
                </div>
            `;
        }

        async function loadMoreVideos() {
            await loadVideos(loadedVideos);
            renderVideoInterface();
        }

        function renderNoVideos() {
            document.getElementById('video-section').innerHTML = `
                <div class="no-videos">
                    <h2>üéâ –í—ñ–¥–º—ñ–Ω–Ω–æ!</h2>
                    <p>–í—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –≤—ñ–¥–µ–æ –≤–∂–µ –æ—Ü—ñ–Ω–µ–Ω—ñ. –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–æ–≤–∂—É—î –Ω–∞–≤—á–∞–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∞—à–∏—Ö –æ—Ü—ñ–Ω–æ–∫.</p>
                    <p style="margin-top: 15px; opacity: 0.8;">–ù–æ–≤—ñ –≤—ñ–¥–µ–æ –∑'—è–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ—Å–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞–≥–µ–Ω—Ç–æ–º.</p>
                </div>
            `;
        }

        function formatParams(video) {
            const params = [];
            if (video.fps && video.fps !== 'N/A') params.push(`<div class="param-item"><div class="param-label">FPS</div><div class="param-value">${video.fps}</div></div>`);
            if (video.width && video.height && video.width !== 'N/A') params.push(`<div class="param-item"><div class="param-label">–†–æ–∑–º—ñ—Ä</div><div class="param-value">${video.width}x${video.height}</div></div>`);
            if (video.seconds && video.seconds !== 'N/A') params.push(`<div class="param-item"><div class="param-label">–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å</div><div class="param-value">${video.seconds}—Å</div></div>`);
            if (video.seed && video.seed !== 'N/A') params.push(`<div class="param-item"><div class="param-label">Seed</div><div class="param-value">${video.seed}</div></div>`);
            if (video.combo && video.combo !== 'N/A') params.push(`<div class="param-item"><div class="param-label">–ö–æ–º–±–æ</div><div class="param-value">${video.combo}</div></div>`);
            if (video.iteration && video.iteration !== 'N/A') params.push(`<div class="param-item"><div class="param-label">–Ü—Ç–µ—Ä–∞—Ü—ñ—è</div><div class="param-value">${video.iteration}</div></div>`);
            
            return params.length > 0 ? `<div class="params-grid">${params.join('')}</div>` : '<div class="debug-info">‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –≤ knowledge.json</div>';
        }

        function formatAutoMetrics(metrics) {
            if (!metrics || Object.keys(metrics).length === 0) {
                return '<div class="debug-info">‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ</div>';
            }
            
            const metricItems = [];
            for (const [key, value] of Object.entries(metrics)) {
                if (typeof value === 'number') {
                    metricItems.push(`
                        <div class="metric-item">
                            <div class="metric-label">${key}</div>
                            <div class="metric-value">${value.toFixed(2)}</div>
                        </div>
                    `);
                }
            }
            return metricItems.length > 0 ? `<div class="auto-metrics">${metricItems.join('')}</div>` : '<div class="debug-info">‚ö†Ô∏è –ù–µ–º–∞—î —á–∏—Å–ª–æ–≤–∏—Ö –º–µ—Ç—Ä–∏–∫</div>';
        }

        function displayVideo(index) {
            if (index < 0 || index >= videos.length) return;
            
            currentVideoIndex = index;
            const video = videos[index];
            const videoUrl = `/video/${encodeURIComponent(video.name)}`;
            
            // Debug —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
            console.log('üé¨ –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ:', video);
            
            document.getElementById('video-content').innerHTML = `
                <div class="video-container">
                    <div class="video-player">
                        <video controls autoplay muted>
                            <source src="${videoUrl}" type="video/mp4">
                            –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–µ–æ.
                        </video>
                    </div>
                    <div class="video-info">
                        <div class="info-section">
                            <div class="info-title">üìù –ü—Ä–æ–º–ø—Ç</div>
                            <div class="info-content">${video.prompt && video.prompt !== '–ü—Ä–æ–º–ø—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π' ? video.prompt : '‚ö†Ô∏è –ü—Ä–æ–º–ø—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ knowledge.json'}</div>
                        </div>
                        
                        <div class="info-section">
                            <div class="info-title">‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó</div>
                            ${formatParams(video)}
                        </div>
                        
                        <div class="info-section">
                            <div class="info-title">ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏</div>
                            ${formatAutoMetrics(video.auto_metrics)}
                        </div>
                        
                        <div class="debug-info">
                            <strong>Debug:</strong> ${video.name} | –ó–Ω–∞–π–¥–µ–Ω–æ: ${video.found_in_knowledge ? '–¢–∞–∫' : '–ù—ñ'} | –°–ø–æ—Å—ñ–±: ${video.match_method || '–ù–µ–≤—ñ–¥–æ–º–æ'}
                        </div>
                    </div>
                </div>

                <form class="rating-form" onsubmit="submitRating(event)">
                    <input type="hidden" name="video_name" value="${video.name}">
                    
                    <div class="rating-grid">
                        <div class="rating-group">
                            <label class="rating-label">üåü –ó–∞–≥–∞–ª—å–Ω–∞ —è–∫—ñ—Å—Ç—å</label>
                            <input type="range" name="overall_quality" min="1" max="10" value="5" class="rating-input" oninput="updateRatingValue(this)">
                            <div class="rating-scale">
                                <span>1 - –î—É–∂–µ –ø–æ–≥–∞–Ω–æ</span>
                                <span class="rating-value" id="overall_quality_value">5</span>
                                <span>10 - –í—ñ–¥–º—ñ–Ω–Ω–æ</span>
                            </div>
                        </div>

                        <div class="rating-group">
                            <label class="rating-label">üëÅÔ∏è –í—ñ–∑—É–∞–ª—å–Ω–∞ —è–∫—ñ—Å—Ç—å</label>
                            <input type="range" name="visual_quality" min="1" max="10" value="5" class="rating-input" oninput="updateRatingValue(this)">
                            <div class="rating-scale">
                                <span>1 - –†–æ–∑–º–∏—Ç–æ</span>
                                <span class="rating-value" id="visual_quality_value">5</span>
                                <span>10 - –ö—Ä–∏—Å—Ç–∞–ª—å–Ω–æ</span>
                            </div>
                        </div>

                        <div class="rating-group">
                            <label class="rating-label">üèÉ –Ø–∫—ñ—Å—Ç—å —Ä—É—Ö—É</label>
                            <input type="range" name="motion_quality" min="1" max="10" value="5" class="rating-input" oninput="updateRatingValue(this)">
                            <div class="rating-scale">
                                <span>1 - –î—å–æ—Ä–≥–∞–Ω–Ω—è</span>
                                <span class="rating-value" id="motion_quality_value">5</span>
                                <span>10 - –ü–ª–∞–≤–Ω–æ</span>
                            </div>
                        </div>

                        <div class="rating-group">
                            <label class="rating-label">üéØ –í—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –ø—Ä–æ–º–ø—Ç—É</label>
                            <input type="range" name="prompt_adherence" min="1" max="10" value="5" class="rating-input" oninput="updateRatingValue(this)">
                            <div class="rating-scale">
                                <span>1 - –ù–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î</span>
                                <span class="rating-value" id="prompt_adherence_value">5</span>
                                <span>10 - –¢–æ—á–Ω–æ</span>
                            </div>
                        </div>

                        <div class="rating-group">
                            <label class="rating-label">üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å</label>
                            <input type="range" name="creativity" min="1" max="10" value="5" class="rating-input" oninput="updateRatingValue(this)">
                            <div class="rating-scale">
                                <span>1 - –ë–∞–Ω–∞–ª—å–Ω–æ</span>
                                <span class="rating-value" id="creativity_value">5</span>
                                <span>10 - –£–Ω—ñ–∫–∞–ª—å–Ω–æ</span>
                            </div>
                        </div>

                        <div class="rating-group">
                            <label class="rating-label">üîß –¢–µ—Ö–Ω—ñ—á–Ω–∞ —è–∫—ñ—Å—Ç—å</label>
                            <input type="range" name="technical_quality" min="1" max="10" value="5" class="rating-input" oninput="updateRatingValue(this)">
                            <div class="rating-scale">
                                <span>1 - –ê—Ä—Ç–µ—Ñ–∞–∫—Ç–∏</span>
                                <span class="rating-value" id="technical_quality_value">5</span>
                                <span>10 - –ë–µ–∑–¥–æ–≥–∞–Ω–Ω–æ</span>
                            </div>
                        </div>

                        <div class="defects-section">
                            <div class="info-title">‚ö†Ô∏è –í–∏—è–≤–ª–µ–Ω—ñ –¥–µ—Ñ–µ–∫—Ç–∏</div>
                            <div class="defects-grid">
                                <div class="checkbox-group">
                                    <input type="checkbox" name="anatomy_issues" id="anatomy_issues">
                                    <label for="anatomy_issues">–ü—Ä–æ–±–ª–µ–º–∏ –∑ –∞–Ω–∞—Ç–æ–º—ñ—î—é</label>
                                </div>
                                <div class="checkbox-group">
                                    <input type="checkbox" name="extra_limbs" id="extra_limbs">
                                    <label for="extra_limbs">–ó–∞–π–≤—ñ –∫—ñ–Ω—Ü—ñ–≤–∫–∏</label>
                                </div>
                                <div class="checkbox-group">
                                    <input type="checkbox" name="face_distortion" id="face_distortion">
                                    <label for="face_distortion">–°–ø–æ—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±–ª–∏—á—á—è</label>
                                </div>
                                <div class="checkbox-group">
                                    <input type="checkbox" name="temporal_inconsistency" id="temporal_inconsistency">
                                    <label for="temporal_inconsistency">–ù–µ–ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å —É —á–∞—Å—ñ</label>
                                </div>
                                <div class="checkbox-group">
                                    <input type="checkbox" name="artifacts" id="artifacts">
                                    <label for="artifacts">–¶–∏—Ñ—Ä–æ–≤—ñ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∏</label>
                                </div>
                                <div class="checkbox-group">
                                    <input type="checkbox" name="lighting_issues" id="lighting_issues">
                                    <label for="lighting_issues">–ü—Ä–æ–±–ª–µ–º–∏ –∑ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è–º</label>
                                </div>
                            </div>
                        </div>

                        <div class="comment-section">
                            <label class="rating-label" for="comments">üí≠ –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ —Ç–∞ –ø—Ä–∏–º—ñ—Ç–∫–∏</label>
                            <textarea name="comments" id="comments" class="comment-input" 
                                placeholder="–î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ, —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–±–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è..."></textarea>
                        </div>
                    </div>

                    <div class="reference-checkbox">
                        <input type="checkbox" name="is_reference" id="is_reference">
                        <label for="is_reference">‚≠ê –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –µ—Ç–∞–ª–æ–Ω–Ω–µ –≤—ñ–¥–µ–æ –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è –∞–≥–µ–Ω—Ç–∞</label>
                    </div>

                    <div class="action-buttons">
                        <button type="submit" class="submit-btn">üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –æ—Ü—ñ–Ω–∫—É</button>
                        <button type="button" class="skip-btn" onclick="skipVideo()">‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏</button>
                    </div>
                </form>
            `;

            // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
            document.getElementById('current-index').textContent = index + 1;
            document.getElementById('prev-btn').disabled = index === 0;
            document.getElementById('next-btn').disabled = index === videos.length - 1;
        }

        function updateRatingValue(input) {
            const valueSpan = document.getElementById(input.name + '_value');
            if (valueSpan) {
                valueSpan.textContent = input.value;
            }
        }

        function previousVideo() {
            if (currentVideoIndex > 0) {
                currentVideoIndex--;
                displayVideo(currentVideoIndex);
            }
        }

        function nextVideo() {
            if (currentVideoIndex < videos.length - 1) {
                currentVideoIndex++;
                displayVideo(currentVideoIndex);
            }
        }

        function skipVideo() {
            nextVideo();
        }

        async function submitRating(event) {
            event.preventDefault();
            
            const formData = new FormData(event.target);
            const rating = {};
            
            // –ó–±—ñ—Ä –≤—Å—ñ—Ö –æ—Ü—ñ–Ω–æ–∫
            for (let [key, value] of formData.entries()) {
                if (key.includes('_issues') || key.includes('_limbs') || key.includes('_distortion') || 
                    key.includes('_inconsistency') || key.includes('_artifacts') || key.includes('_reference') ||
                    key.includes('lighting_issues')) {
                    rating[key] = true;
                } else if (key === 'comments') {
                    rating[key] = value;
                } else if (key !== 'video_name') {
                    rating[key] = parseFloat(value);
                }
            }

            // –î–æ–¥–∞–≤–∞–Ω–Ω—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö
            rating.rated_at = new Date().toISOString();
            rating.rated_by = 'manual_review';

            try {
                const response = await fetch('/api/rate', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        video_name: formData.get('video_name'),
                        rating: rating
                    })
                });
                
                const result = await response.json();
                
                if (result.status === 'success') {
                    // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
                    const successDiv = document.createElement('div');
                    successDiv.className = 'success-message';
                    successDiv.textContent = '‚úÖ –û—Ü—ñ–Ω–∫–∞ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∞!';
                    document.getElementById('video-content').prepend(successDiv);
                    
                    // –í–∏–¥–∞–ª–µ–Ω–Ω—è –æ—Ü—ñ–Ω–µ–Ω–æ–≥–æ –≤—ñ–¥–µ–æ –∑—ñ —Å–ø–∏—Å–∫—É
                    videos.splice(currentVideoIndex, 1);
                    
                    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    await loadStats();
                    
                    setTimeout(() => {
                        if (videos.length === 0) {
                            renderNoVideos();
                        } else {
                            // –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –≤—ñ–¥–µ–æ –∞–±–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ, —è–∫—â–æ —Ü–µ –±—É–ª–æ –æ—Å—Ç–∞–Ω–Ω—î
                            if (currentVideoIndex >= videos.length) {
                                currentVideoIndex = videos.length - 1;
                            }
                            displayVideo(currentVideoIndex);
                        }
                    }, 1000);
                } else {
                    throw new Error(result.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞');
                }
            } catch (error) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error);
                const errorDiv = document.createElement('div');
                errorDiv.className = 'error-message';
                errorDiv.textContent = '‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: ' + error.message;
                document.getElementById('video-content').prepend(errorDiv);
            }
        }

        // –ì–∞—Ä—è—á—ñ –∫–ª–∞–≤—ñ—à—ñ
        document.addEventListener('keydown', function(event) {
            if (event.ctrlKey || event.metaKey) return;
            
            switch(event.key) {
                case 'ArrowLeft':
                    event.preventDefault();
                    previousVideo();
                    break;
                case 'ArrowRight':
                    event.preventDefault();
                    nextVideo();
                    break;
                case 'Enter':
                    if (event.ctrlKey) {
                        event.preventDefault();
                        const form = document.querySelector('.rating-form');
                        if (form) {
                            form.dispatchEvent(new Event('submit'));
                        }
                    }
                    break;
            }
        });

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–≥—Ä–∞–º–∏
        initializeApp();
    </script>
</body>
</html>
        """
        
        self.send_response(200)
        self.send_header('Content-type', 'text/html; charset=utf-8')
        self.end_headers()
        self.wfile.write(html.encode('utf-8'))
    
    def serve_videos_api(self):
        """API –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–µ–æ—Ü—ñ–Ω–µ–Ω–∏—Ö –≤—ñ–¥–µ–æ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –ø–æ—à—É–∫–æ–º"""
        # –ü–∞—Ä—Å–∏–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
        url_parts = urllib.parse.urlparse(self.path)
        query_params = urllib.parse.parse_qs(url_parts.query)
        offset = int(query_params.get('offset', ['0'])[0])
        limit = int(query_params.get('limit', ['50'])[0])
        
        print(f"üîç API –≤—ñ–¥–µ–æ: offset={offset}, limit={limit}")
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –æ—Ü—ñ–Ω–µ–Ω—ñ –≤—ñ–¥–µ–æ
        manual_ratings = self._load_json(self.manual_ratings_file, {})
        rated_videos = set(manual_ratings.keys())
        print(f"üìä –û—Ü—ñ–Ω–µ–Ω—ñ –≤—ñ–¥–µ–æ: {len(rated_videos)}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –≤—ñ–¥–µ–æ —Ñ–∞–π–ª–∏
        video_files = glob.glob(f"{self.video_dir}*.mp4")
        video_files.sort(key=os.path.getmtime, reverse=True)
        print(f"üé¨ –í—Å—å–æ–≥–æ –≤—ñ–¥–µ–æ —Ñ–∞–π–ª—ñ–≤: {len(video_files)}")
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ knowledge –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π
        knowledge = self._load_json(self.knowledge_file, {"history": []})
        print(f"üìö –ó–∞–ø–∏—Å—ñ–≤ –≤ knowledge.json: {len(knowledge.get('history', []))}")
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –Ω–µ–æ—Ü—ñ–Ω–µ–Ω—ñ –≤—ñ–¥–µ–æ
        unrated_videos = []
        for video_path in video_files:
            video_name = os.path.basename(video_path)
            if video_name not in rated_videos:
                unrated_videos.append(video_path)
        
        print(f"‚è≥ –ù–µ–æ—Ü—ñ–Ω–µ–Ω–∏—Ö –≤—ñ–¥–µ–æ: {len(unrated_videos)}")
        
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é
        paginated_videos = unrated_videos[offset:offset + limit]
        print(f"üì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—ñ–¥–µ–æ: {len(paginated_videos)}")
        
        result = []
        for video_path in paginated_videos:
            video_name = os.path.basename(video_path)
            stat = os.stat(video_path)
            
            # –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –ø–æ—à—É–∫ –¥–µ—Ç–∞–ª–µ–π –≤—ñ–¥–µ–æ
            video_details, match_info = self._enhanced_video_search(video_name, knowledge)
            
            # –ó–±–∏—Ä–∞—î–º–æ –∞–≤—Ç–æ-–º–µ—Ç—Ä–∏–∫–∏ –∑ knowledge (—Å—É–º—ñ—Å–Ω–æ –∑ –Ω–æ–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é)
            auto_metrics = {}
            if isinstance(video_details, dict):
                try:
                    md = video_details.get('metrics') or {}
                    if isinstance(md, dict):
                        auto_metrics.update(md)
                except Exception:
                    pass
                try:
                    am = video_details.get('auto_metrics') or {}
                    if isinstance(am, dict):
                        auto_metrics.update(am)
                except Exception:
                    pass
                # Legacy –ø–ª–æ—Å–∫—ñ –ø–æ–ª—è —è–∫ fallback
                if not auto_metrics:
                    for k in ('overall','blur','exposure','blockiness','flicker'):
                        v = video_details.get(k)
                        if v is not None:
                            auto_metrics[k] = v

            video_info = {
                'name': video_name,
                'size_mb': round(stat.st_size / 1024 / 1024, 1),
                'created': time.strftime("%Y-%m-%d %H:%M", time.localtime(stat.st_mtime)),
                'prompt': video_details.get('prompt', '–ü—Ä–æ–º–ø—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π'),
                'fps': video_details.get('params', {}).get('fps', 'N/A'),
                'width': video_details.get('params', {}).get('width', 'N/A'),
                'height': video_details.get('params', {}).get('height', 'N/A'),
                'seconds': video_details.get('params', {}).get('seconds', 'N/A'),
                'seed': video_details.get('params', {}).get('seed', 'N/A'),
                'combo': video_details.get('combo', 'N/A'),
                'auto_metrics': auto_metrics or {},                
                'iteration': video_details.get('iteration', 'N/A'),
                # Debug —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
                'found_in_knowledge': match_info['found'],
                'match_method': match_info['method'],
                'search_details': match_info['details']
            }
            
            result.append(video_info)
        
        print(f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ {len(result)} –≤—ñ–¥–µ–æ")
        self.send_json_response(result)
    
    def serve_debug_api(self):
        """Debug API –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É —Å–∏—Å—Ç–µ–º–∏"""
        knowledge = self._load_json(self.knowledge_file, {"history": []})
        manual_ratings = self._load_json(self.manual_ratings_file, {})
        
        # –ü—Ä–∏–∫–ª–∞–¥–∏ —ñ–º–µ–Ω —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        video_files = glob.glob(f"{self.video_dir}*.mp4")[:10]
        
        debug_info = {
            "knowledge_entries": len(knowledge.get('history', [])),
            "manual_ratings": len(manual_ratings),
            "sample_video_files": [os.path.basename(f) for f in video_files],
            "sample_knowledge_entries": knowledge.get('history', [])[:3] if knowledge.get('history') else [],
            "sample_file_search": []
        }
        
        # –¢–µ—Å—Ç—É—î–º–æ –ø–æ—à—É–∫ –¥–ª—è –∫—ñ–ª—å–∫–æ—Ö —Ñ–∞–π–ª—ñ–≤
        for video_file in video_files[:3]:
            video_name = os.path.basename(video_file)
            details, match_info = self._enhanced_video_search(video_name, knowledge)
            debug_info["sample_file_search"].append({
                "video_name": video_name,
                "found": match_info['found'],
                "method": match_info['method'],
                "details": match_info['details'],
                "prompt_found": bool(details.get('prompt'))
            })
        
        self.send_json_response(debug_info)
    
    def _enhanced_video_search(self, video_name: str, knowledge: dict) -> tuple:
        """–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –ø–æ—à—É–∫ –≤—ñ–¥–µ–æ –≤ knowledge.json –∑ debug —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é"""
        match_info = {
            'found': False,
            'method': 'none',
            'details': {}
        }
        
        try:
            history = knowledge.get("history", [])
            if not history:
                match_info['details'] = {'error': '–ü–æ—Ä–æ–∂–Ω—è —ñ—Å—Ç–æ—Ä—ñ—è –≤ knowledge.json'}
                return {}, match_info
            
            print(f"üîç –ü–æ—à—É–∫ –≤—ñ–¥–µ–æ: {video_name} –≤ {len(history)} –∑–∞–ø–∏—Å–∞—Ö")
            
            # –ú–µ—Ç–æ–¥ 1: –ü–æ—à—É–∫ –∑–∞ —Ç–æ—á–Ω–∏–º —ñ–º'—è–º —Ñ–∞–π–ª—É
            for entry in history:
                # video_path = entry.get("video_path", "")
                video_path = entry.get("video") or entry.get("video_path") or ""
                if video_path and video_path.endswith(video_name):
                    print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —Ç–æ—á–Ω–∏–º —ñ–º'—è–º: {video_path}")
                    match_info.update({
                        'found': True,
                        'method': 'exact_filename',
                        'details': {'matched_path': video_path}
                    })
                    return entry, match_info
            
            # –ú–µ—Ç–æ–¥ 2: –ü–æ—à—É–∫ –∑–∞ timestamp –∑ —ñ–º–µ–Ω—ñ —Ñ–∞–π–ª—É
            parts = video_name.split('_')
            if len(parts) >= 2:
                try:
                    timestamp_str = parts[1]
                    video_timestamp = int(timestamp_str)
                    print(f"üïê –ü–æ—à—É–∫ –∑–∞ timestamp: {video_timestamp}")
                    
                    # –®—É–∫–∞—î–º–æ –Ω–∞–π–±–ª–∏–∂—á–∏–π –∑–∞ —á–∞—Å–æ–º entry
                    best_match = None
                    min_diff = float('inf')
                    
                    for entry in history:
                        entry_timestamp = entry.get("timestamp", 0)
                        if entry_timestamp > 0:
                            diff = abs(entry_timestamp - video_timestamp)
                            if diff < min_diff:
                                min_diff = diff
                                best_match = entry
                    
                    if best_match and min_diff < 60:
                        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞ timestamp: diff={min_diff}s")
                        match_info.update({
                            'found': True,
                            'method': 'timestamp_match',
                            'details': {
                                'video_timestamp': video_timestamp,
                                'matched_timestamp': best_match.get("timestamp"),
                                'time_diff': min_diff
                            }
                        })
                        return best_match, match_info
                    
                except ValueError as e:
                    print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É timestamp: {e}")
            
            print(f"‚ùå –í—ñ–¥–µ–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {video_name}")
            match_info['details'] = {
                'error': '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω—å',
                'video_name': video_name,
                'history_count': len(history)
            }
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É: {e}")
            match_info['details'] = {'exception': str(e)}
        
        return {}, match_info
    
    def serve_stats_api(self):
        """API –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º–∏"""
        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ JSON —Ñ–∞–π–ª–∏
            manual_ratings = self._load_json(self.manual_ratings_file, {})
            knowledge = self._load_json(self.knowledge_file, {"history": [], "best_score": 0})
            bandit_state = self._load_json(self.bandit_state_file, {"t": 0, "arms": []})
            
            # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            total_generated = len(knowledge.get("history", []))
            total_rated = len(manual_ratings)
            
            # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –Ω–µ–æ—Ü—ñ–Ω–µ–Ω–∏—Ö –≤—ñ–¥–µ–æ
            video_files = glob.glob(f"{self.video_dir}*.mp4")
            rated_videos = set(manual_ratings.keys())
            pending_count = len([f for f in video_files if os.path.basename(f) not in rated_videos])
            
            # –°–µ—Ä–µ–¥–Ω—è –æ—Ü—ñ–Ω–∫–∞
            avg_rating = 0
            if manual_ratings:
                overall_scores = []
                for rating_data in manual_ratings.values():
                    if isinstance(rating_data, dict) and 'rating' in rating_data:
                        rating = rating_data['rating']
                        if isinstance(rating, dict) and 'overall_quality' in rating:
                            overall_scores.append(rating['overall_quality'])
                
                if overall_scores:
                    avg_rating = sum(overall_scores) / len(overall_scores)
            
            stats = {
                "total_generated": total_generated,
                "total_rated": total_rated,
                "pending_count": pending_count,
                "avg_rating": avg_rating,
                "best_score": knowledge.get("best_score", 0),
                "bandit_iterations": bandit_state.get("t", 0),
                "learning_arms": len(bandit_state.get("arms", []))
            }
            
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ì–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ={total_generated}, –û—Ü—ñ–Ω–µ–Ω–æ={total_rated}, –û—á—ñ–∫—É—é—Ç—å={pending_count}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            stats = {
                "total_generated": 0,
                "total_rated": 0,
                "pending_count": 0,
                "avg_rating": 0,
                "best_score": 0,
                "bandit_iterations": 0,
                "learning_arms": 0
            }
        
        self.send_json_response(stats)
    
    def serve_video(self):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ–¥–µ–æ —Ñ–∞–π–ª—ñ–≤"""
        video_name = urllib.parse.unquote(self.path.split('/')[-1])
        video_path = os.path.join(self.video_dir, video_name)
        
        if os.path.exists(video_path):
            self.send_response(200)
            self.send_header('Content-type', 'video/mp4')
            self.send_header('Content-Length', str(os.path.getsize(video_path)))
            self.send_header('Accept-Ranges', 'bytes')
            self.end_headers()
            
            with open(video_path, 'rb') as f:
                self.wfile.write(f.read())
        else:
            self.send_error(404, f"–í—ñ–¥–µ–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {video_name}")
    
    def handle_rating(self):
        """–û–±—Ä–æ–±–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ—Ü—ñ–Ω–∫–∏ –∑ –ø–æ–≤–Ω–æ—é —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é –Ω–∞–≤—á–∞–Ω–Ω—è"""
        try:
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            data = json.loads(post_data.decode('utf-8'))
            
            video_name = data.get('video_name')
            rating = data.get('rating')
            
            if not video_name or not rating:
                self.send_json_response({"status": "error", "message": "–ù–µ–ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ"})
                return
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –æ—Ü—ñ–Ω–∫–∏
            manual_ratings = self._load_json(self.manual_ratings_file, {})
            
            # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—É –æ—Ü—ñ–Ω–∫—É
            manual_ratings[video_name] = {
                "rating": rating,
                "timestamp": time.time(),
                "rated_at": time.strftime("%Y-%m-%d %H:%M:%S")
            }
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –æ—Ü—ñ–Ω–∫–∏
            if self._save_json(self.manual_ratings_file, manual_ratings):
                print(f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ –¥–ª—è –≤—ñ–¥–µ–æ: {video_name}")
                
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å–∏—Å—Ç–µ–º—É –Ω–∞–≤—á–∞–Ω–Ω—è
                self._update_learning_system(video_name, rating)
                
                self.send_json_response({"status": "success"})
            else:
                self.send_json_response({"status": "error", "message": "–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è"})
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –æ—Ü—ñ–Ω–∫–∏: {e}")
            self.send_json_response({"status": "error", "message": str(e)})
    
    def _update_learning_system(self, video_name: str, rating: dict):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –Ω–∞–≤—á–∞–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä—É—á–Ω–æ—ó –æ—Ü—ñ–Ω–∫–∏"""
        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
            bandit_state = self._load_json(self.bandit_state_file, {"arms": [], "N": [], "S": [], "t": 0})
            knowledge = self._load_json(self.knowledge_file, {"best_score": 0, "best_params": {}, "history": []})
            
            # –û–±—á–∏—Å–ª—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –æ—Ü—ñ–Ω–∫—É
            overall_score = rating.get('overall_quality', 0)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –Ω–∞–π–∫—Ä–∞—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if overall_score > knowledge.get('best_score', 0):
                knowledge['best_score'] = overall_score
                
                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ü—å–æ–≥–æ –≤—ñ–¥–µ–æ
                video_details, _ = self._enhanced_video_search(video_name, knowledge)
                if video_details:
                    knowledge['best_params'] = {
                        'prompt': video_details.get('prompt', ''),
                        'params': video_details.get('params', {}),
                        'combo': video_details.get('combo', {}),
                        'manual_rating': rating
                    }
            
            # –û–Ω–æ–≤–ª—é—î–º–æ bandit state
            bandit_state['t'] = bandit_state.get('t', 0) + 1
            
            # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä—É—á–Ω—É –æ—Ü—ñ–Ω–∫—É –¥–æ history
            for entry in knowledge.get("history", []):
                if entry.get("video_path", "").endswith(video_name):
                    entry['manual_rating'] = rating
                    entry['manual_rated_at'] = time.strftime("%Y-%m-%d %H:%M:%S")
                    break
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ
            self._save_json(self.bandit_state_file, bandit_state)
            self._save_json(self.knowledge_file, knowledge)
            
            print(f"üéØ –û–Ω–æ–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–≤—á–∞–Ω–Ω—è –¥–ª—è –≤—ñ–¥–µ–æ {video_name} –∑ –æ—Ü—ñ–Ω–∫–æ—é {overall_score}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –Ω–∞–≤—á–∞–Ω–Ω—è: {e}")
    
    def send_json_response(self, data):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"""
        self.send_response(200)
        self.send_header('Content-type', 'application/json; charset=utf-8')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
        self.wfile.write(json.dumps(data, ensure_ascii=False, indent=2).encode('utf-8'))

class QAReviewHandler(EnhancedVideoReviewHandler):
    def do_POST(self):
        if self.path == '/api/ban_combo':
            self.handle_ban_combo()
            return
        return super().do_POST()
    
    def do_GET(self):
        if self.path == '/qa':
            return self.serve_qa_page()
        if self.path.startswith('/search') and self.path == '/search':
            return self.serve_search_page()
        if self.path.startswith('/watch'):
            return self.serve_watch_page()
        if self.path == '/':
            # Render main page with integrated ban control
            return self.serve_main_page_with_ban()
        if self.path == '/base':
            # Serve original main UI from base handler
            return self.serve_main_page()
        if self.path.startswith('/api/videos'):
            # Augmented videos API with review_queue metrics
            return self.serve_videos_api_qa()
        if self.path.startswith('/api/search'):
            return self.serve_search_api()
        if self.path.startswith('/api/video_details'):
            return self.serve_video_details_api()
        return super().do_GET()

    def handle_ban_combo(self):
        try:
            content_length = int(self.headers.get('Content-Length', '0'))
            post_data = self.rfile.read(content_length) if content_length > 0 else b'{}'
            data = json.loads(post_data.decode('utf-8')) if post_data else {}

            combo_key = data.get('combo_key')
            params = data.get('params')
            video_name = data.get('video_name')

            bandit_path = self.bandit_state_file
            state = self._load_json(bandit_path, {"combo_stats": {}, "t": 0, "banned_combos": []})

            banned = set(state.get('banned_combos', []))

            # Resolve from knowledge using video_name if provided
            if not combo_key and video_name:
                knowledge = self._load_json(self.knowledge_file, {"history": []})
                history = knowledge.get("history", [])
                # try exact match by video or video_path
                for entry in history:
                    v = entry.get("video") or entry.get("video_path") or ""
                    if v.endswith(video_name):
                        combo = entry.get("combo") or []
                        entry_params = entry.get("params", {})
                        sampler = (combo[0] if isinstance(combo, list) and len(combo) > 0 else entry_params.get("sampler", "unknown"))
                        scheduler = (combo[1] if isinstance(combo, list) and len(combo) > 1 else entry_params.get("scheduler", "unknown"))
                        fps = str(entry_params.get("fps", 20))
                        cfg = str(entry_params.get("cfg_scale", entry_params.get("cfg", 7.0)))
                        steps = str(entry_params.get("steps", 25))
                        width = entry_params.get("width", 768)
                        height = entry_params.get("height", 432)
                        combo_key = f"{sampler}|{scheduler}|{fps}|{cfg}|{steps}|{width}x{height}"
                        break

            if not combo_key and params:
                # Rebuild combo_key like agent does: sampler|scheduler|fps|cfg|steps|WIDTHxHEIGHT
                sampler = params.get('sampler', 'unknown')
                scheduler = params.get('scheduler', 'unknown')
                fps = str(params.get('fps', 20))
                cfg = str(params.get('cfg_scale', 7.0))
                steps = str(params.get('steps', 25))
                width = params.get('width', 768)
                height = params.get('height', 432)
                combo_key = f"{sampler}|{scheduler}|{fps}|{cfg}|{steps}|{width}x{height}"

            if not combo_key:
                self.send_json_response({"status": "error", "message": "combo_key or params required"})
                return

            banned.add(combo_key)
            state['banned_combos'] = list(banned)

            self._save_json(bandit_path, state)

            # Also mark the video as handled (like rated) so it disappears
            video_marked = False
            if video_name:
                try:
                    manual_ratings = self._load_json(self.manual_ratings_file, {})
                    if video_name not in manual_ratings:
                        manual_ratings[video_name] = {
                            "rating": {
                                "banned": True,
                                "overall_quality": 2,
                                "visual_quality": 2,
                                "motion_quality": 2,
                                "prompt_adherence": 2,
                                "creativity": 2,
                                "technical_quality": 2,
                                "comments": "Auto-banned via QA UI"
                            },
                            "timestamp": time.time(),
                            "rated_at": time.strftime("%Y-%m-%d %H:%M:%S")
                        }
                        self._save_json(self.manual_ratings_file, manual_ratings)
                        video_marked = True
                except Exception:
                    pass

            self.send_json_response({"status": "success", "banned_combo": combo_key, "total_banned": len(banned), "video_marked": video_marked})
        except Exception as e:
            self.send_json_response({"status": "error", "message": str(e)})

    def serve_qa_page(self):
        html = """
<!DOCTYPE html>
<html lang="uk">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>QA Ban Console</title>
  <style>
    body { font-family: Arial, sans-serif; background: #0b1e39; color: #fff; margin: 0; padding: 20px; }
    .nav { display:flex; gap:10px; margin-bottom:12px; }
    .nav button { background:#3949AB; color:#fff; border:0; padding:8px 12px; border-radius:6px; cursor:pointer; }
    .nav button:hover { background:#303F9F; }
    .card { background: rgba(255,255,255,0.08); border: 1px solid rgba(255,255,255,0.2); border-radius: 10px; padding: 16px; margin: 10px 0; }
    .row { display: flex; align-items: center; justify-content: space-between; gap: 10px; }
    button { background: #ff6b6b; color: #fff; border: none; padding: 8px 14px; border-radius: 6px; cursor: pointer; }
    button:hover { background: #ff4040; }
    .small { opacity: 0.8; font-size: 0.9rem; }
  </style>
  <script src="/static/qa_console.js"></script>
</head>
<body>
  <div class="nav">
    <button onclick="location.href='/'">–ì–æ–ª–æ–≤–Ω–∞</button>
    <button onclick="location.href='/search'">–ü–æ—à—É–∫</button>
    <button onclick="location.href='/qa'">QA</button>
  </div>
  <h2>QA Ban Console</h2>
  <p class="small">–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ, —â–æ–± –∑–∞–±–∞–Ω–∏—Ç–∏ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—é –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –∑–∞ –Ω–∞–∑–≤–æ—é –≤—ñ–¥–µ–æ. –°–ø–∏—Å–æ–∫ –Ω–∏–∂—á–µ ‚Äî –Ω–µ–≤—ñ–¥–æ—Ü—ñ–Ω–µ–Ω—ñ –≤—ñ–¥–µ–æ.</p>
  <div id="list">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>
</body>
</html>
"""
        self.send_response(200)
        self.send_header('Content-type', 'text/html; charset=utf-8')
        self.end_headers()
        self.wfile.write(html.encode('utf-8'))

    def serve_main_page_with_ban(self):
        # Wrapper page with ban toolbar over base UI
        wrapper = """
<!DOCTYPE html>
<html lang="uk">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Enhanced Review + Ban</title>
  <style>
    .ban-toolbar { position: fixed; top: 10px; right: 10px; z-index: 9999; }
    .ban-toolbar button { background:#ff6b6b; color:#fff; border:none; padding:8px 12px; border-radius:6px; cursor:pointer; }
    .nav { position: fixed; top: 10px; left: 10px; z-index: 9999; display:flex; gap:8px; }
    .nav button { background:#3949AB; color:#fff; border:0; padding:8px 12px; border-radius:6px; cursor:pointer; }
    .nav button:hover { background:#303F9F; }
  </style>
</head>
<body>
  <iframe id="base" src="/base" style="position:fixed; inset:0; width:100%; height:100%; border:0;"></iframe>
  <div class="nav">
    <button onclick="location.href='/'">–ì–æ–ª–æ–≤–Ω–∞</button>
    <button onclick="location.href='/search'">–ü–æ—à—É–∫</button>
    <button onclick="location.href='/qa'">QA</button>
  </div>
  <div class="ban-toolbar">
    <button onclick="banCurrent()">üö´ Ban combo (current video)</button>
  </div>
  <script src="/static/ban_wrapper.js"></script>
</body>
</html>
"""
        if urllib.parse.urlparse(self.path).path == '/':
            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=utf-8')
            self.end_headers()
            self.wfile.write(wrapper.encode('utf-8'))
        else:
            return super().do_GET()

    def serve_videos_api_qa(self):
        """API like base, but enrich with auto_metrics/combo from review_queue.json"""
        url_parts = urllib.parse.urlparse(self.path)
        query_params = urllib.parse.parse_qs(url_parts.query)
        offset = int(query_params.get('offset', ['0'])[0])
        limit = int(query_params.get('limit', ['50'])[0])

        manual_ratings = self._load_json(self.manual_ratings_file, {})
        rated_videos = set(manual_ratings.keys())

        video_files = glob.glob(f"{self.video_dir}*.mp4")
        video_files.sort(key=os.path.getmtime, reverse=True)

        knowledge = self._load_json(self.knowledge_file, {"history": []})
        review_queue = self._load_json(self.review_queue_file, {"pending": []})
        rq_map = {}
        try:
            for entry in review_queue.get("pending", []):
                name = os.path.basename(entry.get("original_path", ""))
                if name:
                    rq_map[name] = entry
        except Exception:
            pass

        unrated_videos = []
        for video_path in video_files:
            video_name = os.path.basename(video_path)
            if video_name not in rated_videos:
                unrated_videos.append(video_path)

        paginated_videos = unrated_videos[offset:offset + limit]

        result = []
        for video_path in paginated_videos:
            video_name = os.path.basename(video_path)
            stat = os.stat(video_path)

            video_details, match_info = self._enhanced_video_search(video_name, knowledge)

            rq = rq_map.get(video_name)
            # Merge enhanced metrics from knowledge (metrics) with basic auto_metrics
            auto_metrics = {}
            if isinstance(video_details, dict):
                try:
                    md = video_details.get('metrics') or {}
                    if isinstance(md, dict):
                        auto_metrics.update(md)
                except Exception:
                    pass
                try:
                    am = video_details.get('auto_metrics') or {}
                    if isinstance(am, dict):
                        auto_metrics.update(am)
                except Exception:
                    pass
            if (not auto_metrics) and rq and isinstance(rq.get('auto_metrics'), dict):
                auto_metrics = rq.get('auto_metrics')

            combo = video_details.get('combo') if isinstance(video_details, dict) else None
            if (not combo) and rq and isinstance(rq.get('combo'), list):
                combo = rq.get('combo')

            video_info = {
                'name': video_name,
                'size_mb': round(stat.st_size / 1024 / 1024, 1),
                'created': time.strftime("%Y-%m-%d %H:%M", time.localtime(stat.st_mtime)),
                'prompt': video_details.get('prompt', '–ü—Ä–æ–º–ø—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π') if isinstance(video_details, dict) else '–ü—Ä–æ–º–ø—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π',
                'fps': (video_details.get('params', {}) or {}).get('fps', 'N/A') if isinstance(video_details, dict) else 'N/A',
                'width': (video_details.get('params', {}) or {}).get('width', 'N/A') if isinstance(video_details, dict) else 'N/A',
                'height': (video_details.get('params', {}) or {}).get('height', 'N/A') if isinstance(video_details, dict) else 'N/A',
                'seconds': (video_details.get('params', {}) or {}).get('seconds', 'N/A') if isinstance(video_details, dict) else 'N/A',
                'seed': (video_details.get('params', {}) or {}).get('seed', 'N/A') if isinstance(video_details, dict) else 'N/A',
                'combo': combo or 'N/A',
                'auto_metrics': auto_metrics or {},
                'iteration': video_details.get('iteration', 'N/A') if isinstance(video_details, dict) else 'N/A',
                'found_in_knowledge': match_info['found'],
                'match_method': match_info['method'],
                'search_details': match_info['details']
            }
            result.append(video_info)

        self.send_json_response(result)

    def serve_search_api(self):
        """Search across files + rated + knowledge params."""
        url_parts = urllib.parse.urlparse(self.path)
        q = urllib.parse.parse_qs(url_parts.query)

        name_sub = (q.get('q', [''])[0] or '').lower()
        rated_filter = (q.get('rated', ['all'])[0] or 'all')  # 'all'|'true'|'false'
        banned_filter = q.get('banned', [''])[0]
        ref_filter = q.get('reference', [''])[0]
        min_score = float(q.get('min_score', ['-1'])[0] or -1)
        min_overall = float(q.get('min_overall', ['-1'])[0] or -1)
        fps_filter = q.get('fps', [''])[0]
        width_filter = q.get('width', [''])[0]
        height_filter = q.get('height', [''])[0]
        sampler_filter = (q.get('sampler', [''])[0] or '').lower()
        scheduler_filter = (q.get('scheduler', [''])[0] or '').lower()
        offset = int(q.get('offset', ['0'])[0] or 0)
        limit = int(q.get('limit', ['100'])[0] or 100)

        manual = self._load_json(self.manual_ratings_file, {})
        knowledge = self._load_json(self.knowledge_file, {"history": []})

        # Build candidate name set: files + rated keys
        files = [os.path.basename(p) for p in glob.glob(f"{self.video_dir}*.mp4")]
        names = set(files) | set(manual.keys())

        def knowledge_entry_for(name: str):
            det, _mi = self._enhanced_video_search(name, knowledge)
            return det or {}

        def get_score(det: dict):
            if not isinstance(det, dict):
                return None
            if 'overall' in det:
                return det.get('overall')
            m = det.get('metrics', {}) or {}
            for k in ('overall', 'overall_simple', 'blended_overall'):
                if k in m:
                    return m.get(k)
            return None

        def params_of(det: dict):
            p = (det.get('params', {}) if isinstance(det, dict) else {}) or {}
            return {
                'fps': p.get('fps'), 'width': p.get('width'), 'height': p.get('height'),
                'sampler': p.get('sampler') or (det.get('combo', [None, None])[0] if isinstance(det.get('combo'), list) else None),
                'scheduler': p.get('scheduler') or (det.get('combo', [None, None])[1] if isinstance(det.get('combo'), list) else None),
            }

        results = []
        for name in names:
            det = knowledge_entry_for(name)
            score = get_score(det)
            p = params_of(det)
            mr = manual.get(name)
            is_rated = bool(mr)
            rating = (mr or {}).get('rating', {})
            is_banned = bool(rating.get('banned'))
            is_ref = bool(rating.get('is_reference'))
            overall_manual = rating.get('overall_quality')

            # Filters
            if name_sub and name_sub not in name.lower():
                continue
            if rated_filter == 'true' and not is_rated:
                continue
            if rated_filter == 'false' and is_rated:
                continue
            if banned_filter:
                want = banned_filter.lower() == 'true'
                if is_banned != want:
                    continue
            if ref_filter:
                want = ref_filter.lower() == 'true'
                if is_ref != want:
                    continue
            if min_score >= 0 and (score is None or float(score) < min_score):
                continue
            if min_overall >= 0 and (overall_manual is None or float(overall_manual) < min_overall):
                continue
            if fps_filter and str(p.get('fps')) != fps_filter:
                continue
            if width_filter and str(p.get('width')) != width_filter:
                continue
            if height_filter and str(p.get('height')) != height_filter:
                continue
            if sampler_filter and str(p.get('sampler') or '').lower() != sampler_filter:
                continue
            if scheduler_filter and str(p.get('scheduler') or '').lower() != scheduler_filter:
                continue

            results.append({
                'name': name,
                'score': score,
                'manual_overall': overall_manual,
                'rated': is_rated,
                'banned': is_banned,
                'reference': is_ref,
                'params': p,
                'exists': name in files
            })

        results.sort(key=lambda x: (x['rated'] is False, -(x['score'] or -1)))
        paged = results[offset:offset + limit]
        self.send_json_response({'total': len(results), 'items': paged})

    def serve_video_details_api(self):
        url_parts = urllib.parse.urlparse(self.path)
        q = urllib.parse.parse_qs(url_parts.query)
        name = q.get('name', [''])[0]
        if not name:
            return self.send_json_response({'status': 'error', 'message': 'name required'})

        manual = self._load_json(self.manual_ratings_file, {})
        knowledge = self._load_json(self.knowledge_file, {"history": []})
        det, mi = self._enhanced_video_search(name, knowledge)
        mr = manual.get(name, {})
        info = {
            'name': name,
            'found_in_knowledge': bool(mi.get('found')),
            'details': det or {},
            'manual_rating': mr.get('rating') if isinstance(mr, dict) else None,
            'exists': os.path.exists(os.path.join(self.video_dir, name))
        }
        try:
            rq = self._load_json(self.review_queue_file, {"pending": []})
            for entry in rq.get("pending", []):
                en = os.path.basename(entry.get("original_path", ""))
                if en == name:
                    d = info['details'] if isinstance(info['details'], dict) else {}
                    if isinstance(entry.get('auto_metrics'), dict):
                        d.setdefault('auto_metrics', {}).update(entry['auto_metrics'])
                    if isinstance(entry.get('params'), dict):
                        d.setdefault('params', {}).update(entry['params'])
                    if isinstance(entry.get('combo'), list):
                        d.setdefault('combo', entry['combo'])
                    info['details'] = d
                    break
        except Exception:
            pass
        self.send_json_response(info)

    def serve_search_page(self):
        html = """
<!DOCTYPE html>
<html lang="uk">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>–ü–æ—à—É–∫ –≤—ñ–¥–µ–æ</title>
  <style>
    body { font-family: Arial, sans-serif; background:#0b1e39; color:#fff; margin:0; padding:20px; }
    .nav { display:flex; gap:10px; margin-bottom:12px; }
    .nav button { background:#3949AB; color:#fff; border:0; padding:8px 12px; border-radius:6px; cursor:pointer; }
    .nav button:hover { background:#303F9F; }
    .row { display:flex; gap:10px; flex-wrap:wrap; align-items:flex-end; }
    .card { background: rgba(255,255,255,0.08); border: 1px solid rgba(255,255,255,0.2); border-radius: 10px; padding: 12px; margin: 10px 0; }
    input, select { padding:6px 8px; border-radius:6px; border:1px solid rgba(255,255,255,0.3); background:rgba(0,0,0,0.2); color:#fff; }
    button { padding:8px 12px; border:0; background:#2196F3; color:#fff; border-radius:6px; cursor:pointer; }
    button:hover { background:#1976D2; }
    table { width:100%; border-collapse:collapse; margin-top:12px; }
    th, td { padding:8px; border-bottom:1px solid rgba(255,255,255,0.2); text-align:left; }
    .pill { padding:2px 6px; border-radius:10px; background:rgba(255,255,255,0.15); font-size:12px; }
    a { color:#90caf9; }
  </style>
</head>
<body>
  <div class="nav">
    <button onclick="location.href='/'">–ì–æ–ª–æ–≤–Ω–∞</button>
    <button onclick="location.href='/search'">–ü–æ—à—É–∫</button>
    <button onclick="location.href='/qa'">QA</button>
  </div>
  <h2>–ü–æ—à—É–∫ –≤—ñ–¥–µ–æ</h2>
  <div class="row">
    <input id="q" placeholder="–ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∏—Ç—å..." />
    <select id="rated"><option value="all">–í—Å—ñ</option><option value="true">–¢—ñ–ª—å–∫–∏ –æ—Ü—ñ–Ω–µ–Ω—ñ</option><option value="false">–¢—ñ–ª—å–∫–∏ –Ω–µ–æ—Ü—ñ–Ω–µ–Ω—ñ</option></select>
    <select id="banned"><option value="">–ë–∞–Ω? (–≤—Å—ñ)</option><option value="true">–¢—ñ–ª—å–∫–∏ –±–∞–Ω</option><option value="false">–ë–µ–∑ –±–∞–Ω—É</option></select>
    <select id="reference"><option value="">–ï—Ç–∞–ª–æ–Ω? (–≤—Å—ñ)</option><option value="true">–¢–∞–∫</option><option value="false">–ù—ñ</option></select>
    <input id="min_score" type="number" step="0.01" placeholder="min score (0..1)" />
    <input id="min_overall" type="number" step="1" placeholder="min overall (1..10)" />
    <input id="fps" type="number" placeholder="fps" style="width:80px" />
    <input id="width" type="number" placeholder="w" style="width:80px" />
    <input id="height" type="number" placeholder="h" style="width:80px" />
    <input id="sampler" placeholder="sampler" style="width:120px" />
    <input id="scheduler" placeholder="scheduler" style="width:120px" />
    <button onclick="runSearch()">–®—É–∫–∞—Ç–∏</button>
  </div>

  <table id="res"><thead><tr><th>–í—ñ–¥–µ–æ</th><th>Score</th><th>Manual</th><th>–°—Ç–∞—Ç—É—Å</th><th>–ü–∞—Ä–∞–º–µ—Ç—Ä–∏</th><th></th></tr></thead><tbody></tbody></table>

  <script src="/static/search_page.js"></script>
</body>
</html>
"""
        self.send_response(200)
        self.send_header('Content-type', 'text/html; charset=utf-8')
        self.end_headers()
        self.wfile.write(html.encode('utf-8'))

    def serve_watch_page(self):
        url_parts = urllib.parse.urlparse(self.path)
        q = urllib.parse.parse_qs(url_parts.query)
        name = q.get('name', [''])[0]
        if not name:
            name = ''
        html = """
<!DOCTYPE html>
<html lang=\"uk\">
<head>
  <meta charset=\"UTF-8\" />
  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />
  <title>–ü–µ—Ä–µ–≥–ª—è–¥ –≤—ñ–¥–µ–æ</title>
  <style>
    body { font-family: Arial, sans-serif; background:#0b1e39; color:#fff; margin:0; padding:20px; }
    .nav { display:flex; gap:10px; margin-bottom:12px; }
    .nav a, .nav button { background:#3949AB; color:#fff; border:0; padding:8px 12px; border-radius:6px; cursor:pointer; text-decoration:none; display:inline-block; }
    .nav a:hover, .nav button:hover { background:#303F9F; }
    .grid { display:grid; grid-template-columns:1fr 1fr; gap:20px; }
    .card { background: rgba(255,255,255,0.08); border: 1px solid rgba(255,255,255,0.2); border-radius: 10px; padding: 12px; }
    .video-wrap { max-width: 960px; }
    video { width: 100%; max-height: 480px; border-radius:8px; }
    input, textarea { width:100%; padding:6px 8px; border-radius:6px; border:1px solid rgba(255,255,255,0.3); background:rgba(0,0,0,0.2); color:#fff; }
    label { display:block; margin-top:8px; }
    button { padding:8px 12px; border:0; background:#4CAF50; color:#fff; border-radius:6px; cursor:pointer; margin-top:8px; }
  </style>
</head>
<body>
  <div class=\"nav\">
    <a href=\"/\">–ì–æ–ª–æ–≤–Ω–∞</a>
    <a href=\"/search\">–ü–æ—à—É–∫</a>
    <a href=\"/qa\">QA</a>
  </div>
  <h2 id=\"title\">–ü–µ—Ä–µ–≥–ª—è–¥ –≤—ñ–¥–µ–æ</h2>
  <div class=\"grid\">
    <div class=\"card video-wrap\">
      <div id=\"video_box\"></div>
    </div>
    <div class=\"card\">
      <h3>–ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ</h3>
      <pre id=\"details\" style=\"white-space:pre-wrap\"></pre>
      <h3>–û—Ü—ñ–Ω–∫–∞</h3>
      <form id=\"rate_form\"> 
        <input type=\"hidden\" name=\"video_name\" value=\"\"> 
        <label>Overall <input name=\"overall_quality\" type=\"number\" min=\"1\" max=\"10\"></label>
        <label>Visual <input name=\"visual_quality\" type=\"number\" min=\"1\" max=\"10\"></label>
        <label>Motion <input name=\"motion_quality\" type=\"number\" min=\"1\" max=\"10\"></label>
        <label>Prompt adherence <input name=\"prompt_adherence\" type=\"number\" min=\"1\" max=\"10\"></label>
        <label>Creativity <input name=\"creativity\" type=\"number\" min=\"1\" max=\"10\"></label>
        <label>Technical <input name=\"technical_quality\" type=\"number\" min=\"1\" max=\"10\"></label>
        <label><input type=\"checkbox\" name=\"is_reference\"> –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –µ—Ç–∞–ª–æ–Ω</label>
        <label>–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ<textarea name=\"comments\"></textarea></label>
        <button type=\"submit\">–ó–±–µ—Ä–µ–≥—Ç–∏</button>
      </form>
      <div id=\"msg\"></div>
    </div>
  </div>

  <script src=\"/static/watch_page.js\"></script>
</body>
</html>
"""
        self.send_response(200)
        self.send_header('Content-type', 'text/html; charset=utf-8')
        self.end_headers()
        self.wfile.write(html.encode('utf-8'))

if __name__ == '__main__':
    # –ü–æ—Ä—Ç –∑ ENV (SERVER_PORT/PORT), –¥–µ—Ñ–æ–ª—Ç 8189
    PORT = int(os.environ.get('SERVER_PORT', os.environ.get('PORT', '8189')))

    print("üöÄ –ó–∞–ø—É—Å–∫ Enhanced Video Review System (Quick Fix) –¥–ª—è RunPod...")
    print(f"üìÅ –†–æ–±–æ—á–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: {os.environ.get('WAN22_SYSTEM_DIR', '/workspace/wan22_system/')}")
    print(f"üé¨ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –≤—ñ–¥–µ–æ: {os.environ.get('COMFY_OUTPUT_DIR', '/workspace/ComfyUI/output/')}")
    print(f"üíæ JSON —Ñ–∞–π–ª–∏: {os.path.join(os.environ.get('WAN22_SYSTEM_DIR', '/workspace/wan22_system/'), 'auto_state')}")
    print(f"üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    print(f"üì± –í—ñ–¥–∫—Ä–∏–π—Ç–µ –≤ RunPod URL –¥–ª—è –ø–æ—Ä—Ç—É {PORT}")

    print("\nüîß Quick Fix –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:")
    print("  ‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–æ–±–∫–∞ URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–ª—è /api/videos")
    print("  ‚úÖ –î–æ–¥–∞–Ω–µ –¥–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
    print("  ‚úÖ –°–ø—Ä–æ—â–µ–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ—à—É–∫—É –≤—ñ–¥–µ–æ")
    print("  ‚úÖ –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫")

    # –î–æ–∑–≤–æ–ª—è—î–º–æ –ø–µ—Ä–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–∏ —Ç–∞ –±–∞–≥–∞—Ç–æ–ø–æ—Ç–æ—á–Ω—ñ—Å—Ç—å –¥–ª—è –∫—Ä–∞—â–æ—ó –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    class ThreadingTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):
        allow_reuse_address = True

    with ThreadingTCPServer(("", PORT), QAReviewHandler) as httpd:
        try:
            httpd.serve_forever()
        except KeyboardInterrupt:
            print("\nüõë –°–µ—Ä–≤–µ—Ä –∑—É–ø–∏–Ω–µ–Ω–æ")