let currentVideoIndex = 0;
let videos = [];
let stats = {};
let videosPerPage = 50; // –ó–º–µ–Ω—à–µ–Ω–æ –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
let loadedVideos = 0;

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
async function initializeApp() {
    console.log('üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–≥—Ä–∞–º–∏...');
    await Promise.all([loadStats(), loadVideos()]);
}

async function loadStats() {
    try {
        console.log('üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
        const response = await fetch('/api/stats');
        stats = await response.json();
        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞:', stats);
        renderStats();
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
}

async function loadVideos(offset = 0) {
    try {
        console.log(`üé¨ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ: offset=${offset}, limit=${videosPerPage}`);
        const url = `/api/videos?offset=${offset}&limit=${videosPerPage}`;
        console.log('üåê URL –∑–∞–ø–∏—Ç—É:', url);
        
        const response = await fetch(url);
        console.log('üì° –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const newVideos = await response.json();
        console.log(`üì¶ –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–µ–æ: ${newVideos.length}`);
        
        if (offset === 0) {
            videos = newVideos;
        } else {
            videos = videos.concat(newVideos);
        }
        
        loadedVideos = offset + newVideos.length;
        console.log(`üìà –í—Å—å–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: ${loadedVideos}`);
        
        if (videos.length > 0) {
            renderVideoInterface();
            if (offset === 0) {
                displayVideo(0);
            }
        } else if (offset === 0) {
            renderNoVideos();
        }
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ:', error);
        document.getElementById('video-section').innerHTML = 
            `<div class="error-message">‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ: ${error.message}</div>`;
    }
}

function renderStats() {
    const statsGrid = document.getElementById('stats-grid');
    statsGrid.innerHTML = `
        <div class="stat-card">
            <div class="stat-value">${stats.total_generated || 0}</div>
            <div class="stat-label">–í—Å—å–æ–≥–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ</div>
        </div>
        <div class="stat-card">
            <div class="stat-value">${stats.total_rated || 0}</div>
            <div class="stat-label">–û—Ü—ñ–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É</div>
        </div>
        <div class="stat-card">
            <div class="stat-value">${stats.pending_count || 0}</div>
            <div class="stat-label">–û—á—ñ–∫—É—é—Ç—å –æ—Ü—ñ–Ω–∫–∏</div>
        </div>
        <div class="stat-card">
            <div class="stat-value">${stats.bandit_iterations || 0}</div>
            <div class="stat-label">–Ü—Ç–µ—Ä–∞—Ü—ñ–π –Ω–∞–≤—á–∞–Ω–Ω—è</div>
        </div>
        <div class="stat-card">
            <div class="stat-value">${(stats.avg_rating || 0).toFixed(1)}</div>
            <div class="stat-label">–°–µ—Ä–µ–¥–Ω—è –æ—Ü—ñ–Ω–∫–∞</div>
        </div>
        <div class="stat-card">
            <div class="stat-value">${stats.learning_arms || 0}</div>
            <div class="stat-label">–í–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω–∞–≤—á–∞–Ω–Ω—è</div>
        </div>
    `;
}

function renderVideoInterface() {
    const loadMoreButton = loadedVideos < stats.pending_count ? 
        `<button class="load-more-btn" onclick="loadMoreVideos()">–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —â–µ ${Math.min(videosPerPage, stats.pending_count - loadedVideos)} –≤—ñ–¥–µ–æ</button>` : '';
    
    document.getElementById('video-section').innerHTML = `
        <div class="video-section">
            <div class="video-header">
                <h2>üìπ –û—Ü—ñ–Ω–∫–∞ –≤—ñ–¥–µ–æ (<span id="current-index">1</span> –∑ ${videos.length}) [–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: ${loadedVideos}/${stats.pending_count}]</h2>
                <div class="video-nav">
                    <button class="nav-btn" onclick="previousVideo()" id="prev-btn" disabled>‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—î</button>
                    <button class="nav-btn" onclick="nextVideo()" id="next-btn">–ù–∞—Å—Ç—É–ø–Ω–µ ‚û°Ô∏è</button>
                    ${loadMoreButton}
                </div>
            </div>
            <div id="video-content"></div>
        </div>
    `;
}

async function loadMoreVideos() {
    await loadVideos(loadedVideos);
    renderVideoInterface();
}

function renderNoVideos() {
    document.getElementById('video-section').innerHTML = `
        <div class="no-videos">
            <h2>üéâ –í—ñ–¥–º—ñ–Ω–Ω–æ!</h2>
            <p>–í—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –≤—ñ–¥–µ–æ –≤–∂–µ –æ—Ü—ñ–Ω–µ–Ω—ñ. –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–æ–≤–∂—É—î –Ω–∞–≤—á–∞–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∞—à–∏—Ö –æ—Ü—ñ–Ω–æ–∫.</p>
            <p style="margin-top: 15px; opacity: 0.8;">–ù–æ–≤—ñ –≤—ñ–¥–µ–æ –∑'—è–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ—Å–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞–≥–µ–Ω—Ç–æ–º.</p>
        </div>
    `;
}

function formatParams(video) {
    const params = [];
    if (video.fps && video.fps !== 'N/A') params.push(`<div class="param-item"><div class="param-label">FPS</div><div class="param-value">${video.fps}</div></div>`);
    if (video.width && video.height && video.width !== 'N/A') params.push(`<div class="param-item"><div class="param-label">–†–æ–∑–º—ñ—Ä</div><div class="param-value">${video.width}x${video.height}</div></div>`);
    if (video.seconds && video.seconds !== 'N/A') params.push(`<div class="param-item"><div class="param-label">–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å</div><div class="param-value">${video.seconds}—Å</div></div>`);
    if (video.seed && video.seed !== 'N/A') params.push(`<div class="param-item"><div class="param-label">Seed</div><div class="param-value">${video.seed}</div></div>`);
    if (video.combo && video.combo !== 'N/A') params.push(`<div class="param-item"><div class="param-label">–ö–æ–º–±–æ</div><div class="param-value">${video.combo}</div></div>`);
    if (video.iteration && video.iteration !== 'N/A') params.push(`<div class="param-item"><div class="param-label">–Ü—Ç–µ—Ä–∞—Ü—ñ—è</div><div class="param-value">${video.iteration}</div></div>`);
    
    return params.length > 0 ? `<div class="params-grid">${params.join('')}</div>` : '<div class="debug-info">‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –≤ knowledge.json</div>';
}

function formatAutoMetrics(metrics) {
    if (!metrics || Object.keys(metrics).length === 0) {
        return '<div class="debug-info">‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ</div>';
    }
    
    const metricItems = [];
    for (const [key, value] of Object.entries(metrics)) {
        if (typeof value === 'number') {
            metricItems.push(`
                <div class="metric-item">
                    <div class="metric-label">${key}</div>
                    <div class="metric-value">${value.toFixed(2)}</div>
                </div>
            `);
        }
    }
    return metricItems.length > 0 ? `<div class="auto-metrics">${metricItems.join('')}</div>` : '<div class="debug-info">‚ö†Ô∏è –ù–µ–º–∞—î —á–∏—Å–ª–æ–≤–∏—Ö –º–µ—Ç—Ä–∏–∫</div>';
}

function displayVideo(index) {
    if (index < 0 || index >= videos.length) return;
    
    currentVideoIndex = index;
    const video = videos[index];
    const videoUrl = `/video/${encodeURIComponent(video.name)}`;
    
    // Debug —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
    console.log('üé¨ –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ:', video);
    
    document.getElementById('video-content').innerHTML = `
        <div class="video-container">
            <div class="video-player">
                <video controls autoplay muted>
                    <source src="${videoUrl}" type="video/mp4">
                    –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–µ–æ.
                </video>
            </div>
            <div class="video-info">
                <div class="info-section">
                    <div class="info-title">üìù –ü—Ä–æ–º–ø—Ç</div>
                    <div class="info-content">${video.prompt && video.prompt !== '–ü—Ä–æ–º–ø—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π' ? video.prompt : '‚ö†Ô∏è –ü—Ä–æ–º–ø—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ knowledge.json'}</div>
                </div>
                
                <div class="info-section">
                    <div class="info-title">‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó</div>
                    ${formatParams(video)}
                </div>
                
                <div class="info-section">
                    <div class="info-title">ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏</div>
                    ${formatAutoMetrics(video.auto_metrics)}
                </div>
                
                <div class="debug-info">
                    <strong>Debug:</strong> ${video.name} | –ó–Ω–∞–π–¥–µ–Ω–æ: ${video.found_in_knowledge ? '–¢–∞–∫' : '–ù—ñ'} | –°–ø–æ—Å—ñ–±: ${video.match_method || '–ù–µ–≤—ñ–¥–æ–º–æ'}
                </div>
            </div>
        </div>

        <form class="rating-form" onsubmit="submitRating(event)">
            <input type="hidden" name="video_name" value="${video.name}">
            
            <div class="rating-grid">
                <div class="rating-group">
                    <label class="rating-label">üåü –ó–∞–≥–∞–ª—å–Ω–∞ —è–∫—ñ—Å—Ç—å</label>
                    <input type="range" name="overall_quality" min="1" max="10" value="5" class="rating-input" oninput="updateRatingValue(this)">
                    <div class="rating-scale">
                        <span>1 - –î—É–∂–µ –ø–æ–≥–∞–Ω–æ</span>
                        <span class="rating-value" id="overall_quality_value">5</span>
                        <span>10 - –í—ñ–¥–º—ñ–Ω–Ω–æ</span>
                    </div>
                </div>

                <div class="rating-group">
                    <label class="rating-label">üëÅÔ∏è –í—ñ–∑—É–∞–ª—å–Ω–∞ —è–∫—ñ—Å—Ç—å</label>
                    <input type="range" name="visual_quality" min="1" max="10" value="5" class="rating-input" oninput="updateRatingValue(this)">
                    <div class="rating-scale">
                        <span>1 - –†–æ–∑–º–∏—Ç–æ</span>
                        <span class="rating-value" id="visual_quality_value">5</span>
                        <span>10 - –ö—Ä–∏—Å—Ç–∞–ª—å–Ω–æ</span>
                    </div>
                </div>

                <div class="rating-group">
                    <label class="rating-label">üèÉ –Ø–∫—ñ—Å—Ç—å —Ä—É—Ö—É</label>
                    <input type="range" name="motion_quality" min="1" max="10" value="5" class="rating-input" oninput="updateRatingValue(this)">
                    <div class="rating-scale">
                        <span>1 - –î—å–æ—Ä–≥–∞–Ω–Ω—è</span>
                        <span class="rating-value" id="motion_quality_value">5</span>
                        <span>10 - –ü–ª–∞–≤–Ω–æ</span>
                    </div>
                </div>

                <div class="rating-group">
                    <label class="rating-label">üéØ –í—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –ø—Ä–æ–º–ø—Ç—É</label>
                    <input type="range" name="prompt_adherence" min="1" max="10" value="5" class="rating-input" oninput="updateRatingValue(this)">
                    <div class="rating-scale">
                        <span>1 - –ù–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î</span>
                        <span class="rating-value" id="prompt_adherence_value">5</span>
                        <span>10 - –¢–æ—á–Ω–æ</span>
                    </div>
                </div>

                <div class="rating-group">
                    <label class="rating-label">üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å</label>
                    <input type="range" name="creativity" min="1" max="10" value="5" class="rating-input" oninput="updateRatingValue(this)">
                    <div class="rating-scale">
                        <span>1 - –ë–∞–Ω–∞–ª—å–Ω–æ</span>
                        <span class="rating-value" id="creativity_value">5</span>
                        <span>10 - –£–Ω—ñ–∫–∞–ª—å–Ω–æ</span>
                    </div>
                </div>

                <div class="rating-group">
                    <label class="rating-label">üîß –¢–µ—Ö–Ω—ñ—á–Ω–∞ —è–∫—ñ—Å—Ç—å</label>
                    <input type="range" name="technical_quality" min="1" max="10" value="5" class="rating-input" oninput="updateRatingValue(this)">
                    <div class="rating-scale">
                        <span>1 - –ê—Ä—Ç–µ—Ñ–∞–∫—Ç–∏</span>
                        <span class="rating-value" id="technical_quality_value">5</span>
                        <span>10 - –ë–µ–∑–¥–æ–≥–∞–Ω–Ω–æ</span>
                    </div>
                </div>

                <div class="defects-section">
                    <div class="info-title">‚ö†Ô∏è –í–∏—è–≤–ª–µ–Ω—ñ –¥–µ—Ñ–µ–∫—Ç–∏</div>
                    <div class="defects-grid">
                        <div class="checkbox-group">
                            <input type="checkbox" name="anatomy_issues" id="anatomy_issues">
                            <label for="anatomy_issues">–ü—Ä–æ–±–ª–µ–º–∏ –∑ –∞–Ω–∞—Ç–æ–º—ñ—î—é</label>
                        </div>
                        <div class="checkbox-group">
                            <input type="checkbox" name="extra_limbs" id="extra_limbs">
                            <label for="extra_limbs">–ó–∞–π–≤—ñ –∫—ñ–Ω—Ü—ñ–≤–∫–∏</label>
                        </div>
                        <div class="checkbox-group">
                            <input type="checkbox" name="face_distortion" id="face_distortion">
                            <label for="face_distortion">–°–ø–æ—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±–ª–∏—á—á—è</label>
                        </div>
                        <div class="checkbox-group">
                            <input type="checkbox" name="temporal_inconsistency" id="temporal_inconsistency">
                            <label for="temporal_inconsistency">–ù–µ–ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å —É —á–∞—Å—ñ</label>
                        </div>
                        <div class="checkbox-group">
                            <input type="checkbox" name="artifacts" id="artifacts">
                            <label for="artifacts">–¶–∏—Ñ—Ä–æ–≤—ñ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∏</label>
                        </div>
                        <div class="checkbox-group">
                            <input type="checkbox" name="lighting_issues" id="lighting_issues">
                            <label for="lighting_issues">–ü—Ä–æ–±–ª–µ–º–∏ –∑ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è–º</label>
                        </div>
                    </div>
                </div>

                <div class="comment-section">
                    <label class="rating-label" for="comments">üí≠ –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ —Ç–∞ –ø—Ä–∏–º—ñ—Ç–∫–∏</label>
                    <textarea name="comments" id="comments" class="comment-input" 
                        placeholder="–î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ, —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–±–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è..."></textarea>
                </div>
            </div>

            <div class="reference-checkbox">
                <input type="checkbox" name="is_reference" id="is_reference">
                <label for="is_reference">‚≠ê –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –µ—Ç–∞–ª–æ–Ω–Ω–µ –≤—ñ–¥–µ–æ –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è –∞–≥–µ–Ω—Ç–∞</label>
            </div>

            <div class="action-buttons">
                <button type="submit" class="submit-btn">üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –æ—Ü—ñ–Ω–∫—É</button>
                <button type="button" class="skip-btn" onclick="skipVideo()">‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏</button>
            </div>
        </form>
    `;

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    document.getElementById('current-index').textContent = index + 1;
    document.getElementById('prev-btn').disabled = index === 0;
    document.getElementById('next-btn').disabled = index === videos.length - 1;
}

function updateRatingValue(input) {
    const valueSpan = document.getElementById(input.name + '_value');
    if (valueSpan) {
        valueSpan.textContent = input.value;
    }
}

function previousVideo() {
    if (currentVideoIndex > 0) {
        currentVideoIndex--;
        displayVideo(currentVideoIndex);
    }
}

function nextVideo() {
    if (currentVideoIndex < videos.length - 1) {
        currentVideoIndex++;
        displayVideo(currentVideoIndex);
    }
}

function skipVideo() {
    nextVideo();
}

async function submitRating(event) {
    event.preventDefault();
    
    const formData = new FormData(event.target);
    const rating = {};
    
    // –ó–±—ñ—Ä –≤—Å—ñ—Ö –æ—Ü—ñ–Ω–æ–∫
    for (let [key, value] of formData.entries()) {
        if (key.includes('_issues') || key.includes('_limbs') || key.includes('_distortion') || 
            key.includes('_inconsistency') || key.includes('_artifacts') || key.includes('_reference') ||
            key.includes('lighting_issues')) {
            rating[key] = true;
        } else if (key === 'comments') {
            rating[key] = value;
        } else if (key !== 'video_name') {
            rating[key] = parseFloat(value);
        }
    }

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö
    rating.rated_at = new Date().toISOString();
    rating.rated_by = 'manual_review';

    try {
        const response = await fetch('/api/rate', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                video_name: formData.get('video_name'),
                rating: rating
            })
        });
        
        const result = await response.json();
        
        if (result.status === 'success') {
            // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
            const successDiv = document.createElement('div');
            successDiv.className = 'success-message';
            successDiv.textContent = '‚úÖ –û—Ü—ñ–Ω–∫–∞ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∞!';
            document.getElementById('video-content').prepend(successDiv);
            
            // –í–∏–¥–∞–ª–µ–Ω–Ω—è –æ—Ü—ñ–Ω–µ–Ω–æ–≥–æ –≤—ñ–¥–µ–æ –∑—ñ —Å–ø–∏—Å–∫—É
            videos.splice(currentVideoIndex, 1);
            
            // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            await loadStats();
            
            setTimeout(() => {
                if (videos.length === 0) {
                    renderNoVideos();
                } else {
                    // –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –≤—ñ–¥–µ–æ –∞–±–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ, —è–∫—â–æ —Ü–µ –±—É–ª–æ –æ—Å—Ç–∞–Ω–Ω—î
                    if (currentVideoIndex >= videos.length) {
                        currentVideoIndex = videos.length - 1;
                    }
                    displayVideo(currentVideoIndex);
                }
            }, 1000);
        } else {
            throw new Error(result.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞');
        }
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error);
        const errorDiv = document.createElement('div');
        errorDiv.className = 'error-message';
        errorDiv.textContent = '‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: ' + error.message;
        document.getElementById('video-content').prepend(errorDiv);
    }
}

// –ì–∞—Ä—è—á—ñ –∫–ª–∞–≤—ñ—à—ñ
document.addEventListener('keydown', function(event) {
    if (event.ctrlKey || event.metaKey) return;
    
    switch(event.key) {
        case 'ArrowLeft':
            event.preventDefault();
            previousVideo();
            break;
        case 'ArrowRight':
            event.preventDefault();
            nextVideo();
            break;
        case 'Enter':
            if (event.ctrlKey) {
                event.preventDefault();
                const form = document.querySelector('.rating-form');
                if (form) {
                    form.dispatchEvent(new Event('submit'));
                }
            }
            break;
    }
});

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–≥—Ä–∞–º–∏
initializeApp();


